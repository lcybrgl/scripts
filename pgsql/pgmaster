#!/usr/bin/env bash

# Add connection drop
#SELECT pg_terminate_backend(pg_stat_activity.pid)
#FROM pg_stat_activity
#WHERE pg_stat_activity.datname = 'lms2_db' AND pid <> pg_backend_pid();

PGUSER="postgres"
PGHOST="127.0.0.1"

. ~/.pgmaster > /dev/null 2>&1

function show_usage ()
{
    echo -e "
Script usage: pgmaster (-d|-s|-r|-c)\n
    -d database_name path_for_dump  -- Dump database
    -s [database_name]              -- Get size of database
    -r [database_name]              -- Show cache hit ratio
    -c                              -- Show connections
"
    exit 1
}

# Counting connections to db
function count_db ()
{
    if [ "$1" = "" ]
    then
        echo ""
        psql -U $PGUSER -h $PGHOST -c  "SELECT client_addr, usename, datname, state, count(*) FROM pg_stat_activity WHERE pid <> pg_backend_pid() GROUP BY 1,2,3,4 ORDER BY 5 DESC;"
        psql -U $PGUSER -h $PGHOST -c "SELECT count(*) as total_connections from (select pid from pg_stat_activity WHERE pid <> pg_backend_pid()) t;"
    else
        show_usage && exit 1
    fi

}

# Dumping database to specified dir
function dump_db ()
{
    psql -U $PGUSER -h $PGHOST -c "\l" | grep "$1 " 1> /dev/null
    [ $? != 0 ] && echo "No such database \"$1\"" && exit 1

    local dumpass=$2
    local dumpfile=$1-`date +%Y%m%d`
    [ ! -d "$dumpass" ] && echo "No such dir \"$dumpass\"" && exit 1

    local count=`ls -l $dumpass | grep $dumpfile | grep dump |wc -l`
    if [ "$count" == 0 ]
    then
        local dumpfile=$1-`date +%Y%m%d`
    else
        local dumpfile=$1-`date +%Y%m%d`-${count}
    fi

    echo "Dumping database \"$1\" to $dumpass/${dumpfile}.dump..."
    pg_dump -U $PGUSER -h $PGHOST -Fc $1 -f $dumpass/${dumpfile}.dump &> $dumpass/${dumpfile}.log
    if [ $? != 0 ]
    then
        echo "Dump failed!"
        echo "Check $dumpass/${dumpfile}.log or /var/log/pglog!"
        exit 1
    fi
    echo "###################################################################

    Successfuly created dump for $1!
    Dump log is in $dumpass/${dumpfile}.log

###################################################################
    "

}

# Showing size of databases
function size_db ()
{
    if [ "$1" = "" ]
    then
        echo ""
        psql -U $PGUSER -h $PGHOST -c "SELECT pg_database.datname, round(pg_database_size(pg_database.datname)/1024/1024) AS size_MB FROM pg_database ORDER BY 2 DESC;"
    else
        psql -U $PGUSER -h $PGHOST -c "\l" | grep "$1 " 1> /dev/null
        if [ $? != 0 ]
        then
            echo "No such database!"
            exit 1
        fi
        echo ""
        psql -U $PGUSER -h $PGHOST -c "SELECT pg_database.datname, round(pg_database_size(pg_database.datname)/1024/1024) AS size_MB FROM pg_database where pg_database.datname = '$1';"
    fi
}

function size_tables ()
{
    tbl_cmd="SELECT nspname || '.' || relname AS relation, pg_size_pretty(pg_total_relation_size(C.oid)) AS total_size FROM pg_class C LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace) WHERE nspname NOT IN ('pg_catalog', 'information_schema') AND C.relkind <> 'i' AND nspname !~ '^pg_toast' ORDER BY pg_total_relation_size(C.oid) DESC LIMIT 10;"
    echo ""
    if [ ! "$1" = "" ]
    then
        psql -U $PGUSER -h $PGHOST -d $1 -c "$tbl_cmd"
    fi
}

function hit_ratio ()
{
    if [ "$1" = "" ]
    then
        echo ""
        psql -U $PGUSER -h $PGHOST -c "SELECT datname,blks_hit::float/(blks_read + blks_hit) AS cache_hit_ratio FROM pg_stat_database WHERE blks_read != 0 AND datname != 'postgres';"
    else
        psql -U $PGUSER -h $PGHOST -c "\l" | grep "$1 " 1> /dev/null
        if [ $? != 0 ]
        then
            echo "No such database!"
            exit 1
        fi
        echo ""
        psql -U $PGUSER -h $PGHOST -c "SELECT datname,blks_hit::float/(blks_read + blks_hit) AS cache_hit_ratio FROM pg_stat_database WHERE blks_read != 0 AND datname = '$1';"
    fi
}

[ $# -gt 3 ] && show_usage
[ $# -lt 1 ] && show_usage

case $1 in
    -d)
        [ "$2" = "" ] && echo "Need more arguments" && exit 1
        [ "$3" = "" ] && echo "Need more arguments" && exit 1
        dump_db $2 $3
        ;;
    -c)
        count_db $2
        ;;
    -s)
        size_db $2
        ;;
    -t)
        [ "$2" = "" ] && echo "Need more arguments" && exit 1
        size_tables $2
        ;;
    -r)
        hit_ratio $2
        ;;
    *)
        show_usage
        exit 1
        ;;
esac
exit 0

